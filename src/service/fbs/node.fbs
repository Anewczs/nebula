namespace nebula.service;

table EchoReply {
  message: string;
}

table EchoPing {
  name: string;
}

table ManyEchoPings {
  name: string;
  num_greetings: int;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// Define Query Plan Serialization Format
//////////////////////////////////////////////////////////////////////////////////////////////////

// cpp: Query - query serialization and compile in node
table QueryPlan {
  uuid: string;
  tbl: string;
  filter: string;
  fields: [string];
  groups: [uint32];
  sorts: [uint32];
  desc: bool;
  limit: uint64;
  tstart: uint64;
  tend: uint64;
}

// cpp: Flat Buffer - intermediate memory batch serde
// define serialized batch type - it can be customized binary format such as flat, json or csv.
enum BatchType:byte { Flat = 0, Json = 1 }
table BatchRows {
  schema: string;
  type: BatchType = Flat;
  data: [byte];
}

rpc_service NodeServer {
  Echo(EchoPing): EchoReply;
  Echos(ManyEchoPings): EchoReply(streaming: "server");

  // accept a query plan and send back the results
  Query(QueryPlan): BatchRows;
}